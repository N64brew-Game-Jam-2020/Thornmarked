load("@rules_cc//cc:defs.bzl", "cc_library", "cc_toolchain", "cc_toolchain_suite")
load(":cc_toolchain_config.bzl", "cc_toolchain_config")

cc_library(
    name = "n64",
    srcs = ["start.s"],
    deps = ["@n64sdk//:libultra"],
    visibility = ["//visibility:public"],
)

cc_toolchain_suite(
    name = "toolchain",
    toolchains = {
        "k8": "@local_config_cc//:cc-compiler-k8",
        "n64": ":cc-compiler-n64",
    },
)

filegroup(
    name = "empty",
    srcs = [],
)

filegroup(
    name = "compiler_deps",
    srcs = [],
)

cc_toolchain(
    name = "cc-compiler-n64",
    toolchain_identifier = "n64",
    toolchain_config = ":config-n64",
    all_files = ":compiler_deps",
    ar_files = ":compiler_deps",
    as_files = ":compiler_deps",
    compiler_files = ":compiler_deps",
    dwp_files = ":empty",
    linker_files = ":compiler_deps",
    objcopy_files = ":empty",
    strip_files = ":empty",
    supports_param_files = 1,
    module_map = None,
)

cc_toolchain_config(
    name = "config-n64",
    path = "/opt/n64",
    system = "mips32-elf",
    version = "10.2.0",
    cpu = "mips3",
    toolchain_identifier = "n64",
    compile_flags = [
        # "-U_FORTIFY_SOURCE",
        # "-fstack-protector",
        "-Wall",
        "-Wunused-but-set-parameter",
        "-Wno-free-nonheap-object",
        "-fno-omit-frame-pointer",
        "-ffreestanding",  # new
        "-mfix4300",  # new
        "-G",
        "0",
    ],
    opt_compile_flags = [
        "-g0",
        "-O2",
        # "-D_FORTIFY_SOURCE=1",
        "-DNDEBUG",
        "-ffunction-sections",
        "-fdata-sections",
    ],
    dbg_compile_flags = ["-g"],
    cxx_flags = ["-std=c++0x"],
    link_flags = [
        # "-fuse-ld=gold",
        "-Wl,-no-as-needed",
        # "-Wl,-z,relro,-z,now",
        # "-B/usr/bin",
        "-pass-exit-codes",
        # "-lstdc++",
        # "-lm",
        "-nostdlib",  # new
    ],
    link_libs = [
        "-lgcc",
    ],
    opt_link_flags = ["-Wl,--gc-sections"],
    unfiltered_compile_flags = [
        "-fno-canonical-system-headers",
        "-Wno-builtin-macro-redefined",
        "-D__DATE__=\"redacted\"",
        "-D__TIMESTAMP__=\"redacted\"",
        "-D__TIME__=\"redacted\"",
    ],
)

exports_files(["link.lds"])
